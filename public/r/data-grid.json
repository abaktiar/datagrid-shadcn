{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-grid",
  "type": "registry:component",
  "title": "Data Grid",
  "description": "A feature-rich, composable data grid built with TanStack Table v8, shadcn/ui, and Tailwind CSS. Supports sorting, filtering, pagination, row selection, bulk actions, and context menus.",
  "dependencies": [
    "@tanstack/react-table",
    "@tanstack/react-virtual",
    "lucide-react",
    "class-variance-authority",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "input",
    "select",
    "context-menu",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "src/components/data-grid/data-grid.tsx",
      "content": "'use client';\r\n\r\nimport React, { useMemo, useState } from 'react';\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  ColumnFiltersState,\r\n  SortingState,\r\n  VisibilityState,\r\n  RowSelectionState,\r\n  PaginationState,\r\n  Table,\r\n  Row,\r\n} from '@tanstack/react-table';\r\nimport { cn } from '../../lib/utils';\r\nimport { Checkbox } from '../ui/checkbox';\r\nimport { DataGridProps, DataGridContextValue } from './types';\r\nimport { DataGridContext } from './context';\r\nimport { DataGridHeader } from './data-grid-header';\r\nimport { DataGridBody } from './data-grid-body';\r\nimport { DataGridPagination } from './data-grid-pagination';\r\nimport { DataGridActionDock } from './data-grid-action-dock';\r\nimport { DataGridFilters } from './data-grid-filters';\r\n\r\nexport function DataGrid<TData>({\r\n  data,\r\n  columns,\r\n  enableRowSelection = false,\r\n  enableMultiRowSelection = true,\r\n  onRowSelectionChange,\r\n  actions = [],\r\n  cellContextMenuItems,\r\n  headerContextMenuItems,\r\n  enableCellContextMenu = false,\r\n  enableHeaderContextMenu = false,\r\n  enablePagination = true,\r\n  pageSize = 10,\r\n  pageSizeOptions = [10, 20, 50, 100],\r\n  manualPagination = false,\r\n  pageCount,\r\n  totalCount,\r\n  onPaginationChange,\r\n  onDataChange,\r\n  enableSorting = true,\r\n  enableMultiSort = false,\r\n  manualSorting = false,\r\n  onSortingChange,\r\n  enableGlobalFilter = true,\r\n  enableColumnFilters = true,\r\n  manualFiltering = false,\r\n  onGlobalFilterChange,\r\n  onColumnFiltersChange,\r\n  enableColumnResizing = true,\r\n  onColumnSizingChange,\r\n  enableVirtualization = false,\r\n  estimateSize = 35,\r\n  isLoading = false,\r\n  error = null,\r\n  className,\r\n  'aria-label': ariaLabel = 'Data grid',\r\n  'aria-describedby': ariaDescribedBy,\r\n}: DataGridProps<TData>) {\r\n  // State management\r\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n  const [columnSizing, setColumnSizing] = useState<Record<string, number>>({});\r\n  const [globalFilter, setGlobalFilter] = useState('');\r\n  const [pagination, setPagination] = useState<PaginationState>({\r\n    pageIndex: 0,\r\n    pageSize,\r\n  });\r\n\r\n  // Enhanced columns with selection column if needed\r\n  const enhancedColumns = useMemo(() => {\r\n    const cols = [...columns];\r\n    if (enableRowSelection) {\r\n      cols.unshift({\r\n        id: 'select',\r\n        header: ({ table }: { table: Table<TData> }) => (\r\n          <Checkbox\r\n            checked={\r\n              table.getIsAllPageRowsSelected() ? true : table.getIsSomePageRowsSelected() ? 'indeterminate' : false\r\n            }\r\n            onCheckedChange={(checked) => {\r\n              if (checked === 'indeterminate') {\r\n                return;\r\n              }\r\n              table.toggleAllPageRowsSelected(checked);\r\n            }}\r\n            aria-label='Select all rows'\r\n          />\r\n        ),\r\n        cell: ({ row }: { row: Row<TData> }) => (\r\n          <Checkbox\r\n            checked={row.getIsSelected()}\r\n            onCheckedChange={(checked) => {\r\n              if (checked === 'indeterminate') {\r\n                return;\r\n              }\r\n              row.toggleSelected(checked);\r\n            }}\r\n            aria-label={`Select row ${row.index + 1}`}\r\n          />\r\n        ),\r\n        enableSorting: false,\r\n        enableHiding: false,\r\n        size: 60,\r\n      } as any);\r\n    }\r\n\r\n    return cols;\r\n  }, [columns, enableRowSelection]);\r\n  // Table instance\r\n  const table = useReactTable({\r\n    data,\r\n    columns: enhancedColumns as any,\r\n    state: {\r\n      rowSelection,\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      columnSizing,\r\n      globalFilter,\r\n      pagination,\r\n    },\r\n    enableRowSelection,\r\n    enableMultiRowSelection,\r\n    enableColumnResizing,\r\n    columnResizeMode: 'onChange',\r\n    onRowSelectionChange: setRowSelection,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onColumnSizingChange: setColumnSizing,\r\n    onGlobalFilterChange: setGlobalFilter,\r\n    onPaginationChange: setPagination,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: enableSorting ? getSortedRowModel() : undefined,\r\n    getFilteredRowModel: enableGlobalFilter || enableColumnFilters ? getFilteredRowModel() : undefined,\r\n    getPaginationRowModel: enablePagination ? getPaginationRowModel() : undefined,\r\n    manualPagination,\r\n    manualSorting,\r\n    manualFiltering,\r\n    pageCount: pageCount ?? -1,\r\n    meta: {\r\n      totalCount,\r\n    },\r\n    getRowId: (row, index) => {\r\n      // Use a unique identifier if available, otherwise fall back to index\r\n      return (row as any).id?.toString() ?? index.toString();\r\n    },\r\n  });\r\n\r\n  // Selected rows\r\n  const selectedRows = useMemo(() => {\r\n    return table.getFilteredSelectedRowModel().rows;\r\n  }, [table, rowSelection]);\r\n\r\n  // Context value\r\n  const contextValue: DataGridContextValue<TData> = useMemo(\r\n    () => ({\r\n      table,\r\n      selectedRows,\r\n      actions,\r\n      cellContextMenuItems,\r\n      headerContextMenuItems,\r\n      enableCellContextMenu,\r\n      enableHeaderContextMenu,\r\n      isLoading,\r\n      error,\r\n    }),\r\n    [\r\n      table,\r\n      selectedRows,\r\n      actions,\r\n      cellContextMenuItems,\r\n      headerContextMenuItems,\r\n      enableCellContextMenu,\r\n      enableHeaderContextMenu,\r\n      isLoading,\r\n      error,\r\n    ]\r\n  );\r\n\r\n  // Handle external callbacks\r\n  React.useEffect(() => {\r\n    onRowSelectionChange?.(selectedRows);\r\n  }, [selectedRows, onRowSelectionChange]);\r\n\r\n  React.useEffect(() => {\r\n    onSortingChange?.(sorting);\r\n  }, [sorting, onSortingChange]);\r\n\r\n  React.useEffect(() => {\r\n    onColumnFiltersChange?.(columnFilters);\r\n  }, [columnFilters, onColumnFiltersChange]);\r\n\r\n  React.useEffect(() => {\r\n    onGlobalFilterChange?.(globalFilter);\r\n  }, [globalFilter, onGlobalFilterChange]);\r\n\r\n  React.useEffect(() => {\r\n    onPaginationChange?.(pagination.pageIndex, pagination.pageSize);\r\n  }, [pagination, onPaginationChange]);\r\n\r\n  React.useEffect(() => {\r\n    onColumnSizingChange?.(columnSizing);\r\n  }, [columnSizing, onColumnSizingChange]);\r\n\r\n  // Server-side data change effect\r\n  React.useEffect(() => {\r\n    if (onDataChange && (manualPagination || manualSorting || manualFiltering)) {\r\n      const params = {\r\n        pagination: {\r\n          pageIndex: pagination.pageIndex,\r\n          pageSize: pagination.pageSize,\r\n        },\r\n        sorting: sorting.map((sort) => ({\r\n          id: sort.id,\r\n          desc: sort.desc,\r\n        })),\r\n        filters: columnFilters.map((filter) => ({\r\n          id: filter.id,\r\n          value: filter.value,\r\n        })),\r\n        globalFilter,\r\n      };\r\n      onDataChange(params);\r\n    }\r\n  }, [\r\n    pagination,\r\n    sorting,\r\n    columnFilters,\r\n    globalFilter,\r\n    onDataChange,\r\n    manualPagination,\r\n    manualSorting,\r\n    manualFiltering,\r\n  ]);\r\n\r\n  return (\r\n    <DataGridContext.Provider value={contextValue}>\r\n      <div\r\n        className={cn('space-y-4', className)}\r\n        role='region'\r\n        aria-label={ariaLabel}\r\n        aria-describedby={ariaDescribedBy}>\r\n        {/* Global Filter and Column Visibility */}\r\n        {(enableGlobalFilter || enableColumnFilters) && (\r\n          <DataGridFilters\r\n            enableGlobalFilter={enableGlobalFilter}\r\n            enableColumnFilters={enableColumnFilters}\r\n            globalFilter={globalFilter}\r\n            onGlobalFilterChange={setGlobalFilter}\r\n          />\r\n        )}\r\n\r\n        {/* Table */}\r\n        <div className='rounded-md border'>\r\n          <div className='relative overflow-auto'>\r\n            <table\r\n              className='w-full caption-bottom text-sm'\r\n              role='grid'\r\n              aria-rowcount={table.getRowModel().rows.length}\r\n              style={{\r\n                width: table.getCenterTotalSize(),\r\n              }}>\r\n              <DataGridHeader />\r\n              <DataGridBody enableVirtualization={enableVirtualization} estimateSize={estimateSize} />\r\n            </table>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Pagination */}\r\n        {enablePagination && <DataGridPagination pageSizeOptions={pageSizeOptions} />}\r\n      </div>\r\n\r\n      {/* Fixed Bottom Action Dock */}\r\n      {enableRowSelection && selectedRows.length > 0 && actions.length > 0 && <DataGridActionDock />}\r\n    </DataGridContext.Provider>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/data-grid-header.tsx",
      "content": "'use client';\n\nimport { flexRender } from '@tanstack/react-table';\nimport { ArrowUpDown, ArrowUp, ArrowDown } from 'lucide-react';\nimport { cn } from '../../lib/utils';\nimport { useDataGrid } from './context';\nimport { HeaderContextMenu } from './data-grid-context-menu';\n\nexport function DataGridHeader() {\n  const { table, headerContextMenuItems, enableHeaderContextMenu } = useDataGrid();\n\n  return (\n    <thead className='[&_tr]:border-b'>\n      {table.getHeaderGroups().map((headerGroup) => (\n        <tr key={headerGroup.id} role='row'>\n          {headerGroup.headers.map((header) => {\n            const canSort = header.column.getCanSort();\n            const sortDirection = header.column.getIsSorted();\n\n            const headerContent = (\n              <th\n                role='columnheader'\n                aria-sort={\n                  sortDirection === 'asc'\n                    ? 'ascending'\n                    : sortDirection === 'desc'\n                    ? 'descending'\n                    : canSort\n                    ? 'none'\n                    : undefined\n                }\n                className={cn(\n                  'h-12 px-4 text-left align-middle font-medium text-muted-foreground relative',\n                  '[&:has([role=checkbox])]:pr-0',\n                  canSort && 'cursor-pointer select-none hover:bg-muted/50'\n                )}\n                style={{\n                  width: header.getSize(),\n                  minWidth: header.column.columnDef.minSize || 50,\n                  maxWidth: header.column.columnDef.maxSize || 500,\n                }}\n                onClick={canSort ? header.column.getToggleSortingHandler() : undefined}>\n                <div className='flex items-center space-x-2'>\n                  <div className='flex-1'>\n                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                  </div>\n\n                  {canSort && (\n                    <div className='flex items-center'>\n                      {sortDirection === 'asc' ? (\n                        <ArrowUp className='h-4 w-4' />\n                      ) : sortDirection === 'desc' ? (\n                        <ArrowDown className='h-4 w-4' />\n                      ) : (\n                        <ArrowUpDown className='h-4 w-4 opacity-50' />\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Column Resizer */}\n                {header.column.getCanResize() && (\n                  <div\n                    onMouseDown={header.getResizeHandler()}\n                    onTouchStart={header.getResizeHandler()}\n                    className={cn(\n                      'absolute right-0 top-0 h-full w-2 cursor-col-resize select-none touch-none',\n                      'bg-transparent hover:bg-primary/20 transition-colors duration-150',\n                      'before:absolute before:left-1/2 before:top-0 before:h-full before:w-0.5',\n                      'before:bg-border before:transform before:-translate-x-1/2 before:transition-colors before:duration-150',\n                      'hover:before:bg-primary/60 hover:w-3',\n                      header.column.getIsResizing() && 'bg-primary/30 w-3 before:bg-primary'\n                    )}\n                    style={{\n                      transform: 'translateX(50%)',\n                    }}\n                    title={`Resize ${header.column.columnDef.header} column`}\n                  />\n                )}\n              </th>\n            );\n\n            return enableHeaderContextMenu && headerContextMenuItems ? (\n              <HeaderContextMenu key={header.id} column={header.column} items={headerContextMenuItems}>\n                {headerContent}\n              </HeaderContextMenu>\n            ) : (\n              headerContent\n            );\n          })}\n        </tr>\n      ))}\n    </thead>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/data-grid-body.tsx",
      "content": "'use client';\n\nimport { useRef } from 'react';\nimport { flexRender } from '@tanstack/react-table';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { cn } from '../../lib/utils';\nimport { useDataGrid } from './context';\nimport { CellContextMenu } from './data-grid-context-menu';\n\ninterface DataGridBodyProps {\n  enableVirtualization?: boolean;\n  estimateSize?: number;\n}\n\nexport function DataGridBody({ enableVirtualization = false, estimateSize = 35 }: DataGridBodyProps) {\n  const { table, isLoading, error, cellContextMenuItems, enableCellContextMenu } = useDataGrid();\n  const tableContainerRef = useRef<HTMLTableSectionElement>(null);\n\n  const rows = table.getRowModel().rows;\n\n  // Virtualization setup\n  const rowVirtualizer = useVirtualizer({\n    count: rows.length,\n    getScrollElement: () => tableContainerRef.current,\n    estimateSize: () => estimateSize,\n    enabled: enableVirtualization && rows.length > 50, // Only virtualize for large datasets\n  });\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <tbody ref={tableContainerRef}>\n        <tr>\n          <td colSpan={table.getAllColumns().length} className='h-24 text-center text-muted-foreground'>\n            <div className='flex items-center justify-center space-x-2'>\n              <div className='h-4 w-4 animate-spin rounded-full border-2 border-primary border-t-transparent' />\n              <span>Loading...</span>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    );\n  }\n\n  // Error state\n  if (error) {\n    return (\n      <tbody ref={tableContainerRef}>\n        <tr>\n          <td colSpan={table.getAllColumns().length} className='h-24 text-center text-destructive'>\n            <div className='flex items-center justify-center space-x-2'>\n              <span>Error: {error}</span>\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    );\n  }\n\n  // Empty state\n  if (rows.length === 0) {\n    return (\n      <tbody ref={tableContainerRef}>\n        <tr>\n          <td colSpan={table.getAllColumns().length} className='h-24 text-center text-muted-foreground'>\n            No data available\n          </td>\n        </tr>\n      </tbody>\n    );\n  }\n\n  // Virtualized rendering\n  if (enableVirtualization && rowVirtualizer.getVirtualItems().length > 0) {\n    const virtualItems = rowVirtualizer.getVirtualItems();\n\n    return (\n      <tbody\n        ref={tableContainerRef}\n        style={{\n          height: `${rowVirtualizer.getTotalSize()}px`,\n          position: 'relative',\n        }}>\n        {virtualItems.map((virtualItem) => {\n          const row = rows[virtualItem.index];\n          return (\n            <tr\n              key={row.id}\n              role='row'\n              aria-rowindex={virtualItem.index + 2} // +2 because header is row 1\n              aria-selected={row.getIsSelected()}\n              className={cn(\n                'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',\n                row.getIsSelected() && 'bg-muted'\n              )}\n              style={{\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: `${virtualItem.size}px`,\n                transform: `translateY(${virtualItem.start}px)`,\n              }}>\n              {row.getVisibleCells().map((cell) => (\n                <CellContextMenu\n                  key={cell.id}\n                  row={row}\n                  column={cell.column}\n                  value={cell.getValue()}\n                  items={enableCellContextMenu ? cellContextMenuItems : []}>\n                  <td\n                    role='gridcell'\n                    className={cn(\n                      'p-4 align-middle [&:has([role=checkbox])]:pr-0',\n                      cell.column.id === 'select' && 'w-12'\n                    )}\n                    style={{\n                      width: cell.column.getSize(),\n                      minWidth: cell.column.columnDef.minSize || 50,\n                      maxWidth: cell.column.columnDef.maxSize || 500,\n                    }}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </td>\n                </CellContextMenu>\n              ))}\n            </tr>\n          );\n        })}\n      </tbody>\n    );\n  }\n\n  // Standard rendering\n  return (\n    <tbody ref={tableContainerRef}>\n      {rows.map((row) => (\n        <tr\n          key={row.id}\n          role='row'\n          aria-rowindex={row.index + 2} // +2 because header is row 1\n          aria-selected={row.getIsSelected()}\n          className={cn(\n            'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',\n            row.getIsSelected() && 'bg-muted'\n          )}>\n          {row.getVisibleCells().map((cell) => (\n            <CellContextMenu\n              key={cell.id}\n              row={row}\n              column={cell.column}\n              value={cell.getValue()}\n              items={enableCellContextMenu ? cellContextMenuItems : []}>\n              <td\n                role='gridcell'\n                className={cn('p-4 align-middle [&:has([role=checkbox])]:pr-0', cell.column.id === 'select' && 'w-12')}\n                style={{\n                  width: cell.column.getSize(),\n                  minWidth: cell.column.columnDef.minSize || 50,\n                  maxWidth: cell.column.columnDef.maxSize || 500,\n                }}>\n                {flexRender(cell.column.columnDef.cell, cell.getContext())}\n              </td>\n            </CellContextMenu>\n          ))}\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/data-grid-pagination.tsx",
      "content": "import { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from 'lucide-react'\nimport { Button } from '../ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\nimport { useDataGrid } from './context'\n\ninterface DataGridPaginationProps {\n  pageSizeOptions?: number[]\n}\n\nexport function DataGridPagination({ \n  pageSizeOptions = [10, 20, 50, 100] \n}: DataGridPaginationProps) {\n  const { table } = useDataGrid();\n\n  const currentPage = table.getState().pagination.pageIndex + 1;\n  const totalPages = table.getPageCount();\n  const pageSize = table.getState().pagination.pageSize;\n\n  // Support both client-side and server-side pagination\n  const isServerSide = table.options.manualPagination;\n  const totalCount = (table.options.meta as any)?.totalCount;\n  const totalRows = isServerSide && totalCount ? totalCount : table.getFilteredRowModel().rows.length;\n  const startRow = table.getState().pagination.pageIndex * pageSize + 1;\n  const endRow = Math.min(startRow + pageSize - 1, totalRows);\n\n  return (\n    <div className='flex items-center justify-between px-2'>\n      <div className='flex-1 text-sm text-muted-foreground'>\n        {table.getFilteredSelectedRowModel().rows.length > 0 && (\n          <span>\n            {table.getFilteredSelectedRowModel().rows.length} of {table.getFilteredRowModel().rows.length} row(s)\n            selected.\n          </span>\n        )}\n      </div>\n\n      <div className='flex items-center space-x-6 lg:space-x-8'>\n        {/* Rows per page */}\n        <div className='flex items-center space-x-2'>\n          <p className='text-sm font-medium'>Rows per page</p>\n          <Select\n            value={pageSize.toString()}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value));\n            }}>\n            <SelectTrigger className='h-8 w-[70px]'>\n              <SelectValue placeholder={pageSize.toString()} />\n            </SelectTrigger>\n            <SelectContent side='top'>\n              {pageSizeOptions.map((size) => (\n                <SelectItem key={size} value={size.toString()}>\n                  {size}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Page info */}\n        <div className='flex w-[100px] items-center justify-center text-sm font-medium'>\n          Page {currentPage} of {totalPages}\n        </div>\n\n        {/* Row range info */}\n        <div className='text-sm text-muted-foreground'>\n          {totalRows > 0 ? `${startRow}-${endRow} of ${totalRows}` : '0 of 0'}\n        </div>\n\n        {/* Navigation buttons */}\n        <div className='flex items-center space-x-2'>\n          <Button\n            variant='outline'\n            className='hidden h-8 w-8 p-0 lg:flex'\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n            aria-label='Go to first page'>\n            <ChevronsLeft className='h-4 w-4' />\n          </Button>\n\n          <Button\n            variant='outline'\n            className='h-8 w-8 p-0'\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n            aria-label='Go to previous page'>\n            <ChevronLeft className='h-4 w-4' />\n          </Button>\n\n          <Button\n            variant='outline'\n            className='h-8 w-8 p-0'\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n            aria-label='Go to next page'>\n            <ChevronRight className='h-4 w-4' />\n          </Button>\n\n          <Button\n            variant='outline'\n            className='hidden h-8 w-8 p-0 lg:flex'\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n            aria-label='Go to last page'>\n            <ChevronsRight className='h-4 w-4' />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/data-grid-filters.tsx",
      "content": "import { Search, Settings2, Eye, EyeOff } from 'lucide-react'\nimport { Input } from '../ui/input';\nimport { Button } from '../ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '../ui/dropdown-menu';\nimport { useDataGrid } from './context'\n\ninterface DataGridFiltersProps {\n  enableGlobalFilter?: boolean\n  enableColumnFilters?: boolean\n  globalFilter: string\n  onGlobalFilterChange: (value: string) => void\n}\n\nexport function DataGridFilters({\n  enableGlobalFilter = true,\n  enableColumnFilters = true,\n  globalFilter,\n  onGlobalFilterChange,\n}: DataGridFiltersProps) {\n  const { table } = useDataGrid()\n\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex flex-1 items-center space-x-2\">\n        {/* Global Search */}\n        {enableGlobalFilter && (\n          <div className=\"relative max-w-sm\">\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search all columns...\"\n              value={globalFilter}\n              onChange={(event) => onGlobalFilterChange(event.target.value)}\n              className=\"pl-8\"\n              aria-label=\"Search all columns\"\n            />\n          </div>\n        )}\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        {/* Column Visibility Toggle */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              className=\"ml-auto hidden h-8 lg:flex\"\n              aria-label=\"Toggle column visibility\"\n            >\n              <Settings2 className=\"mr-2 h-4 w-4\" />\n              View\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\n            <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {table\n              .getAllColumns()\n              .filter(\n                (column) =>\n                  typeof column.accessorFn !== 'undefined' && column.getCanHide()\n              )\n              .map((column) => {\n                const isVisible = column.getIsVisible()\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={isVisible}\n                    onCheckedChange={(value) => column.toggleVisibility(!!value)}\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      {isVisible ? (\n                        <Eye className=\"h-4 w-4\" />\n                      ) : (\n                        <EyeOff className=\"h-4 w-4\" />\n                      )}\n                      <span>\n                        {typeof column.columnDef.header === 'string'\n                          ? column.columnDef.header\n                          : column.id}\n                      </span>\n                    </div>\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/data-grid-action-dock.tsx",
      "content": "import { X, MoreHorizontal } from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '../ui/dropdown-menu';\r\nimport { useDataGrid } from './context';\r\nimport { DataGridAction } from './types';\r\n\r\nexport function DataGridActionDock() {\r\n  const { selectedRows, actions, table } = useDataGrid();\r\n\r\n  if (selectedRows.length === 0 || actions.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // Filter actions based on visibility and enablement\r\n  const visibleActions = actions.filter((action) => (action.isVisible ? action.isVisible(selectedRows) : true));\r\n\r\n  const primaryActions = visibleActions.slice(0, 3); // Show first 3 actions as dock items\r\n  const overflowActions = visibleActions.slice(3); // Rest go in dropdown\r\n\r\n  const handleActionClick = async (action: DataGridAction<any>) => {\r\n    try {\r\n      await action.onClick(selectedRows);\r\n    } catch (error) {\r\n      console.error('Action failed:', error);\r\n    }\r\n  };\r\n\r\n  const clearSelection = () => {\r\n    table.resetRowSelection();\r\n  };\r\n\r\n  return (\r\n    <div className='fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50 animate-in slide-in-from-bottom-4 duration-300'>\r\n      <div className='flex items-center gap-3 px-4 py-3 bg-background/95 backdrop-blur-md border border-border/50 rounded-2xl shadow-lg shadow-black/10 dark:shadow-black/20'>\r\n        <Button variant='outline' size='sm' onClick={clearSelection} aria-label='Clear selection'>\r\n          {selectedRows.length} selected <X className='h-4 w-4' />\r\n        </Button>\r\n\r\n        {/* Dock Separator */}\r\n        <div className='w-px h-6 bg-border/50 mx-1' />\r\n\r\n        {/* Primary Actions */}\r\n        <div className='flex items-center gap-2'>\r\n          {primaryActions.map((action) => {\r\n            const isEnabled = action.isEnabled ? action.isEnabled(selectedRows) : true;\r\n\r\n            return (\r\n              <Button\r\n                key={action.id}\r\n                variant={action.variant || 'default'}\r\n                size='sm'\r\n                onClick={() => handleActionClick(action)}\r\n                disabled={!isEnabled}>\r\n                {action.icon && <span className='h-4 w-4'>{action.icon}</span>}\r\n                <span>{action.label}</span>\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* Overflow Actions */}\r\n        {overflowActions.length > 0 && (\r\n          <>\r\n            <div className='w-px h-6 bg-border/50 mx-1' />\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button variant='outline' size='sm'>\r\n                  <MoreHorizontal className='h-4 w-4' />\r\n                  <span>More</span>\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align='center' side='top' sideOffset={8}>\r\n                {overflowActions.map((action) => {\r\n                  const isEnabled = action.isEnabled ? action.isEnabled(selectedRows) : true;\r\n\r\n                  return (\r\n                    <DropdownMenuItem key={action.id} onClick={() => handleActionClick(action)} disabled={!isEnabled}>\r\n                      {action.icon && <span className='h-4 w-4'>{action.icon}</span>}\r\n                      <span>{action.label}</span>\r\n                    </DropdownMenuItem>\r\n                  );\r\n                })}\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/data-grid-context-menu.tsx",
      "content": "import { ReactNode } from 'react';\nimport {\n  ContextMenu,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from '../ui/context-menu';\nimport { Row, Column } from '@tanstack/react-table';\nimport { CellContextMenuItem, HeaderContextMenuItem } from './types';\n\ninterface CellContextMenuProps<TData> {\n  children: ReactNode;\n  row: Row<TData>;\n  column: Column<TData>;\n  value: any;\n  items?: CellContextMenuItem<TData>[];\n}\n\ninterface HeaderContextMenuProps<TData> {\n  children: ReactNode;\n  column: Column<TData>;\n  items?: HeaderContextMenuItem<TData>[];\n}\n\nexport function CellContextMenu<TData>({ children, row, column, value, items = [] }: CellContextMenuProps<TData>) {\n  if (items.length === 0) {\n    return <>{children}</>;\n  }\n\n  const visibleItems = items.filter((item) => (item.isVisible ? item.isVisible(row, column, value) : true));\n\n  if (visibleItems.length === 0) {\n    return <>{children}</>;\n  }\n\n  return (\n    <ContextMenu>\n      <ContextMenuTrigger asChild>{children}</ContextMenuTrigger>\n      <ContextMenuContent className='w-48'>\n        {visibleItems.map((item) => {\n          if (item.separator) {\n            return <ContextMenuSeparator key={item.id} />;\n          }\n\n          const isEnabled = item.isEnabled ? item.isEnabled(row, column, value) : true;\n\n          return (\n            <ContextMenuItem\n              key={item.id}\n              onClick={() => item.onClick(row, column, value)}\n              disabled={!isEnabled}\n              className={`flex items-center gap-2 ${\n                item.variant === 'destructive' ? 'text-destructive focus:text-destructive' : ''\n              }`}>\n              {item.icon && <span className='h-4 w-4'>{item.icon}</span>}\n              <span>{item.label}</span>\n            </ContextMenuItem>\n          );\n        })}\n      </ContextMenuContent>\n    </ContextMenu>\n  );\n}\n\nexport function HeaderContextMenu<TData>({ children, column, items = [] }: HeaderContextMenuProps<TData>) {\n  if (items.length === 0) {\n    return <>{children}</>;\n  }\n\n  const visibleItems = items.filter((item) => (item.isVisible ? item.isVisible(column) : true));\n\n  if (visibleItems.length === 0) {\n    return <>{children}</>;\n  }\n\n  return (\n    <ContextMenu>\n      <ContextMenuTrigger asChild>{children}</ContextMenuTrigger>\n      <ContextMenuContent className='w-48'>\n        {visibleItems.map((item) => {\n          if (item.separator) {\n            return <ContextMenuSeparator key={item.id} />;\n          }\n\n          const isEnabled = item.isEnabled ? item.isEnabled(column) : true;\n\n          return (\n            <ContextMenuItem\n              key={item.id}\n              onClick={() => item.onClick(column)}\n              disabled={!isEnabled}\n              className={`flex items-center gap-2 ${\n                item.variant === 'destructive' ? 'text-destructive focus:text-destructive' : ''\n              }`}>\n              {item.icon && <span className='h-4 w-4'>{item.icon}</span>}\n              <span>{item.label}</span>\n            </ContextMenuItem>\n          );\n        })}\n      </ContextMenuContent>\n    </ContextMenu>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/context.tsx",
      "content": "import { createContext, useContext } from 'react'\nimport { DataGridContextValue } from './types'\n\nexport const DataGridContext = createContext<DataGridContextValue<any> | null>(null)\n\nexport function useDataGrid<TData>() {\n  const context = useContext(DataGridContext) as DataGridContextValue<TData> | null\n  \n  if (!context) {\n    throw new Error('useDataGrid must be used within a DataGrid component')\n  }\n  \n  return context\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/types.ts",
      "content": "import { ColumnDef, Row, Table, Column } from '@tanstack/react-table';\nimport { ReactNode } from 'react';\n\nexport interface DataGridColumn<TData> extends ColumnDef<TData> {\n  id: string;\n  header: string | ReactNode;\n  accessorKey?: keyof TData;\n  cell?: ({ row }: { row: Row<TData> }) => ReactNode;\n  enableSorting?: boolean;\n  enableFiltering?: boolean;\n  enableHiding?: boolean;\n  enableResizing?: boolean;\n  size?: number;\n  minSize?: number;\n  maxSize?: number;\n}\n\nexport interface DataGridAction<TData> {\n  id: string;\n  label: string;\n  icon?: ReactNode;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n  onClick: (selectedRows: Row<TData>[]) => void | Promise<void>;\n  isEnabled?: (selectedRows: Row<TData>[]) => boolean;\n  isVisible?: (selectedRows: Row<TData>[]) => boolean;\n}\n\nexport interface CellContextMenuItem<TData> {\n  id: string;\n  label: string;\n  icon?: ReactNode;\n  onClick: (row: Row<TData>, column: Column<TData>, value: any) => void | Promise<void>;\n  isEnabled?: (row: Row<TData>, column: Column<TData>, value: any) => boolean;\n  isVisible?: (row: Row<TData>, column: Column<TData>, value: any) => boolean;\n  separator?: boolean;\n  variant?: 'default' | 'destructive';\n}\n\nexport interface HeaderContextMenuItem<TData> {\n  id: string;\n  label: string;\n  icon?: ReactNode;\n  onClick: (column: Column<TData>) => void | Promise<void>;\n  isEnabled?: (column: Column<TData>) => boolean;\n  isVisible?: (column: Column<TData>) => boolean;\n  separator?: boolean;\n  variant?: 'default' | 'destructive';\n}\n\nexport interface DataChangeParams {\n  pagination: {\n    pageIndex: number;\n    pageSize: number;\n  };\n  sorting: Array<{\n    id: string;\n    desc: boolean;\n  }>;\n  filters: Array<{\n    id: string;\n    value: any;\n  }>;\n  globalFilter: string;\n}\n\nexport interface DataGridProps<TData> {\n  data: TData[];\n  columns: DataGridColumn<TData>[];\n\n  // Selection\n  enableRowSelection?: boolean;\n  enableMultiRowSelection?: boolean;\n  onRowSelectionChange?: (selectedRows: Row<TData>[]) => void;\n\n  // Actions\n  actions?: DataGridAction<TData>[];\n\n  // Context Menus\n  cellContextMenuItems?: CellContextMenuItem<TData>[];\n  headerContextMenuItems?: HeaderContextMenuItem<TData>[];\n  enableCellContextMenu?: boolean;\n  enableHeaderContextMenu?: boolean;\n\n  // Pagination\n  enablePagination?: boolean;\n  pageSize?: number;\n  pageSizeOptions?: number[];\n  manualPagination?: boolean;\n  pageCount?: number;\n  totalCount?: number;\n  onPaginationChange?: (pageIndex: number, pageSize: number) => void;\n\n  // Sorting\n  enableSorting?: boolean;\n  enableMultiSort?: boolean;\n  manualSorting?: boolean;\n  onSortingChange?: (sorting: any[]) => void;\n\n  // Filtering\n  enableGlobalFilter?: boolean;\n  enableColumnFilters?: boolean;\n  manualFiltering?: boolean;\n  onGlobalFilterChange?: (globalFilter: string) => void;\n  onColumnFiltersChange?: (columnFilters: any[]) => void;\n\n  // Server-side data loading\n  onDataChange?: (params: DataChangeParams) => void;\n\n  // Column resizing\n  enableColumnResizing?: boolean;\n  onColumnSizingChange?: (columnSizing: Record<string, number>) => void;\n\n  // Virtualization\n  enableVirtualization?: boolean;\n  estimateSize?: number;\n\n  // Loading & Error states\n  isLoading?: boolean;\n  error?: string | null;\n\n  // Styling\n  className?: string;\n\n  // Accessibility\n  'aria-label'?: string;\n  'aria-describedby'?: string;\n}\n\nexport interface DataGridState {\n  rowSelection: Record<string, boolean>;\n  sorting: any[];\n  columnFilters: any[];\n  globalFilter: string;\n  pagination: {\n    pageIndex: number;\n    pageSize: number;\n  };\n  columnVisibility: Record<string, boolean>;\n  columnSizing: Record<string, number>;\n}\n\nexport interface DataGridContextValue<TData> {\n  table: Table<TData>;\n  selectedRows: Row<TData>[];\n  actions: DataGridAction<TData>[];\n  cellContextMenuItems?: CellContextMenuItem<TData>[];\n  headerContextMenuItems?: HeaderContextMenuItem<TData>[];\n  enableCellContextMenu: boolean;\n  enableHeaderContextMenu: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/context-menu-utils.tsx",
      "content": "import {\n  Copy,\n  Pin,\n  PinOff,\n  SortAsc,\n  SortDesc,\n  Filter,\n  FilterX,\n  Eye,\n  EyeOff,\n  Trash2,\n  Edit,\n  MoreHorizontal,\n  Columns,\n} from 'lucide-react';\nimport { Column, Row } from '@tanstack/react-table';\nimport { CellContextMenuItem, HeaderContextMenuItem } from './types';\n\n// Individual Cell Context Menu Items\n\nexport const copyCellItem = <TData,>(): CellContextMenuItem<TData> => ({\n  id: 'copy-cell',\n  label: 'Copy Cell',\n  icon: <Copy className='h-4 w-4' />,\n  onClick: (row, column, value) => {\n    const textValue = String(value || '');\n    navigator.clipboard.writeText(textValue);\n  },\n});\n\nexport const copyRowItem = <TData,>(): CellContextMenuItem<TData> => ({\n  id: 'copy-row',\n  label: 'Copy Row',\n  icon: <Copy className='h-4 w-4' />,\n  onClick: (row) => {\n    const rowData = JSON.stringify(row.original, null, 2);\n    navigator.clipboard.writeText(rowData);\n  },\n});\n\nexport const editCellItem = <TData,>(\n  onEdit?: (row: Row<TData>, column: Column<TData>, value: any) => void\n): CellContextMenuItem<TData> => ({\n  id: 'edit-cell',\n  label: 'Edit Cell',\n  icon: <Edit className='h-4 w-4' />,\n  onClick:\n    onEdit ||\n    ((row, column, value) => {\n      console.log('Edit cell:', { row: row.original, column: column.id, value });\n    }),\n  isEnabled: (row, column) => column.columnDef.enableEditing !== false,\n});\n\nexport const deleteRowItem = <TData,>(onDelete?: (row: Row<TData>) => void): CellContextMenuItem<TData> => ({\n  id: 'delete-row',\n  label: 'Delete Row',\n  icon: <Trash2 className='h-4 w-4' />,\n  variant: 'destructive' as const,\n  onClick:\n    onDelete ||\n    ((row) => {\n      console.log('Delete row:', row.original);\n    }),\n});\n\nexport const selectRowItem = <TData,>(): CellContextMenuItem<TData> => ({\n  id: 'select-row',\n  label: 'Toggle Selection',\n  icon: <MoreHorizontal className='h-4 w-4' />,\n  onClick: (row) => {\n    row.toggleSelected();\n  },\n});\n\nexport const viewRowDetailsItem = <TData,>(onView?: (row: Row<TData>) => void): CellContextMenuItem<TData> => ({\n  id: 'view-details',\n  label: 'View Details',\n  icon: <Eye className='h-4 w-4' />,\n  onClick:\n    onView ||\n    ((row) => {\n      console.log('View details:', row.original);\n    }),\n});\n\n// Individual Header Context Menu Items\n\nexport const sortAscendingItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'sort-asc',\n  label: 'Sort Ascending',\n  icon: <SortAsc className='h-4 w-4' />,\n  onClick: (column) => column.toggleSorting(false),\n  isEnabled: (column) => column.getCanSort(),\n});\n\nexport const sortDescendingItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'sort-desc',\n  label: 'Sort Descending',\n  icon: <SortDesc className='h-4 w-4' />,\n  onClick: (column) => column.toggleSorting(true),\n  isEnabled: (column) => column.getCanSort(),\n});\n\nexport const clearSortItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'clear-sort',\n  label: 'Clear Sort',\n  icon: <MoreHorizontal className='h-4 w-4' />,\n  onClick: (column) => column.clearSorting(),\n  isEnabled: (column) => column.getIsSorted() !== false,\n});\n\nexport const filterColumnItem = <TData,>(onFilter?: (column: Column<TData>) => void): HeaderContextMenuItem<TData> => ({\n  id: 'filter-column',\n  label: 'Filter Column',\n  icon: <Filter className='h-4 w-4' />,\n  onClick: onFilter || ((column) => console.log('Filter column:', column.id)),\n  isEnabled: (column) => column.getCanFilter(),\n});\n\nexport const clearFilterItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'clear-filter',\n  label: 'Clear Filter',\n  icon: <FilterX className='h-4 w-4' />,\n  onClick: (column) => column.setFilterValue(undefined),\n  isEnabled: (column) => column.getFilterValue() !== undefined,\n});\n\nexport const pinLeftItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'pin-left',\n  label: 'Pin Left',\n  icon: <Pin className='h-4 w-4' />,\n  onClick: (column) => column.pin('left'),\n  isEnabled: (column) => column.getCanPin() && column.getIsPinned() !== 'left',\n});\n\nexport const pinRightItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'pin-right',\n  label: 'Pin Right',\n  icon: <Pin className='h-4 w-4' />,\n  onClick: (column) => column.pin('right'),\n  isEnabled: (column) => column.getCanPin() && column.getIsPinned() !== 'right',\n});\n\nexport const unpinColumnItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'unpin-column',\n  label: 'Unpin Column',\n  icon: <PinOff className='h-4 w-4' />,\n  onClick: (column) => column.pin(false),\n  isEnabled: (column) => column.getIsPinned() !== false,\n});\n\nexport const hideColumnItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'hide-column',\n  label: 'Hide Column',\n  icon: <EyeOff className='h-4 w-4' />,\n  onClick: (column) => column.toggleVisibility(false),\n  isEnabled: (column) => column.getCanHide(),\n});\n\nexport const showColumnItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'show-column',\n  label: 'Show Column',\n  icon: <Eye className='h-4 w-4' />,\n  onClick: (column) => column.toggleVisibility(true),\n  isEnabled: (column) => !column.getIsVisible(),\n});\n\nexport const autoResizeColumnItem = <TData,>(): HeaderContextMenuItem<TData> => ({\n  id: 'auto-resize',\n  label: 'Auto Resize',\n  icon: <Columns className='h-4 w-4' />,\n  onClick: (column) => column.resetSize(),\n  isEnabled: (column) => column.getCanResize(),\n});\n\n// Utility functions for custom context menu items\nexport const createCopyMenuItem = <TData,>(\n  id: string,\n  label: string,\n  getValue: (row: Row<TData>, column: Column<TData>, value: any) => string\n): CellContextMenuItem<TData> => ({\n  id,\n  label,\n  icon: <Copy className=\"h-4 w-4\" />,\n  onClick: (row, column, value) => {\n    const textValue = getValue(row, column, value);\n    navigator.clipboard.writeText(textValue);\n  },\n});\n\nexport const createEditMenuItem = <TData,>(\n  id: string,\n  label: string,\n  onEdit: (row: Row<TData>, column: Column<TData>, value: any) => void\n): CellContextMenuItem<TData> => ({\n  id,\n  label,\n  icon: <Edit className=\"h-4 w-4\" />,\n  onClick: onEdit,\n});\n\nexport const createDeleteMenuItem = <TData,>(\n  id: string,\n  label: string,\n  onDelete: (row: Row<TData>) => void\n): CellContextMenuItem<TData> => ({\n  id,\n  label,\n  icon: <Trash2 className=\"h-4 w-4\" />,\n  variant: 'destructive',\n  onClick: (row) => onDelete(row),\n});\n\n// Separator utilities\nexport const cellSeparator = <TData,>(id: string): CellContextMenuItem<TData> => ({\n  id,\n  label: '',\n  separator: true,\n  onClick: () => {},\n});\n\nexport const headerSeparator = <TData,>(id: string): HeaderContextMenuItem<TData> => ({\n  id,\n  label: '',\n  separator: true,\n  onClick: () => {},\n});\n\n// Convenience bundles for common use cases (optional)\nexport const commonCellItems = <TData,>() => [\n  copyCellItem<TData>(),\n  copyRowItem<TData>(),\n  cellSeparator<TData>('sep-1'),\n  selectRowItem<TData>(),\n];\n\nexport const commonHeaderItems = <TData,>() => [\n  sortAscendingItem<TData>(),\n  sortDescendingItem<TData>(),\n  clearSortItem<TData>(),\n  headerSeparator<TData>('sep-1'),\n  filterColumnItem<TData>(),\n  clearFilterItem<TData>(),\n  headerSeparator<TData>('sep-2'),\n  pinLeftItem<TData>(),\n  pinRightItem<TData>(),\n  unpinColumnItem<TData>(),\n  headerSeparator<TData>('sep-3'),\n  hideColumnItem<TData>(),\n  autoResizeColumnItem<TData>(),\n];\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/data-grid/index.ts",
      "content": "// Main components\nexport { DataGrid } from './data-grid';\nexport { DataGridHeader } from './data-grid-header';\nexport { DataGridBody } from './data-grid-body';\nexport { DataGridPagination } from './data-grid-pagination';\nexport { DataGridFilters } from './data-grid-filters';\nexport { DataGridActionDock } from './data-grid-action-dock';\nexport { CellContextMenu, HeaderContextMenu } from './data-grid-context-menu';\n\n// Context and hooks\nexport { useDataGrid } from './context';\n\n// Types\nexport type {\n  DataGridProps,\n  DataGridColumn,\n  DataGridAction,\n  DataGridState,\n  DataChangeParams,\n  CellContextMenuItem,\n  HeaderContextMenuItem,\n  DataGridContextValue,\n} from './types';\n\n// Context menu utilities\nexport * from './context-menu-utils';\n",
      "type": "registry:component"
    }
  ]
}